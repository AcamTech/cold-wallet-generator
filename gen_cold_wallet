#!/usr/bin/python

# https://github.com/sowbug/cold-wallet-generator
#
# Generates a TeX file representing a nice-looking, scannable paper wallet
# suitable for cold storage.
#
# Accepts a series of addresses on stdin, where each line contains an
# Electrum-format <address:private_key> Bitcoin address.
#
# To generate a document with a lot of addresses, first put
# https://github.com/bkkcoins/misc/blob/master/keyfmt/keyfmt into your
# PATH, then try something like this:
#
# hexdump -v -e '/1 "%02X"' -n 32 /dev/urandom | keyfmt "%a:%w"
#
# For keyfmt to work, you'll also need to have installed
# https://github.com/warner/python-ecdsa to get the elliptic-curve stuff
# needed for key generation. (This project knows nothing specific about
# Bitcoin, but keyfmt does.)

import argparse
import datetime
from jinja2 import Template
import sys

TEX_TEMPLATE = r"""\documentclass[landscape, twocolumn]{book}
\setlength\columnsep{\dimexpr 1in/2\relax}
\setlength{\columnseprule}{0.4pt}
\usepackage{pst-barcode}
\usepackage{auto-pst-pdf}
\usepackage[margin=0.5in]{geometry}

\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhead{}
\renewcommand{\headrulewidth}{0pt}
\fancyfoot{}
\fancyfoot[RE,LO]{Generated {{ today }}}

\begin{document}

\begin{enumerate}
\setcounter{enumi}{0}
{% for key in keys %}\item
\begin{pspicture}(1in,1in)
\psbarcode{%raw%}{{%endraw%}{{ key.address }}{%raw%}}{%endraw%}{eclevel=M width=0.8 height=0.8}{qrcode}
\end{pspicture}
{% if not exclude_private_keys %}\hfill
\begin{pspicture}(1in,1in)
\psbarcode{%raw%}{{%endraw%}{{ key.private_key }}{%raw%}}{%endraw%}{eclevel=H width=0.8 height=0.8}{qrcode}
\end{pspicture}
{% endif %}

{{ key.address }}
{% if not exclude_private_keys and not exclude_private_key_text %}
{{ key.private_key }}
{% endif %}{% if loop.index % 5 != 0 %}\hrule{% else %}\pagebreak
{% endif %}
{% endfor %}

\end{enumerate}

\end{document}"""

def print_pages(args):
  if args.filename:
    f = open(args.filename)
    lines = f.readlines()
    f.close()
  else:
    lines = sys.stdin.readlines()
  template = Template(TEX_TEMPLATE)
  keys = []
  for line in lines:
    key = {}
    address, private_key = line.split(":")
    (key['address'], key['private_key']) = address.strip(), private_key.strip()
    keys.append(key)
  print template.render(keys=keys,
                        today=datetime.date.today(),
                        exclude_private_keys=args.exclude_private_keys,
                        exclude_private_key_text=args.exclude_private_key_text)

parser = argparse.ArgumentParser(description='Generates a TeX-format document ' +
  'that nicely formats a Bitcoin paper wallet for offline storage.')
parser.add_argument("filename", nargs='?',
  help="file of Electrum-format Bitcoin addresses to read. Otherwise reads from stdin.")
parser.add_argument("-x", "--exclude-private-keys", action="store_true",
  help="excludes private keys from document")
parser.add_argument("--exclude-private-key-text", action="store_true",
  help="excludes text representations of private keys from document")

args = parser.parse_args()
print_pages(args)
